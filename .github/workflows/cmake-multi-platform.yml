# This workflow builds via desktop_emulator/build.sh and desktop_emulator/build.bat
# and stores build artifacts under desktop_emulator/build/
name: CMake on multiple platforms

on:
  push:
    branches: [ "main", "rbrtjns90-patch-1" ]
  pull_request:
    branches: [ "main", "rbrtjns90-patch-1" ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/desktop_emulator/build/${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}" >> "$GITHUB_OUTPUT"

      # --- Toolchain & deps per-OS ---------------------------------------------

      - name: Install compilers (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang ninja-build

      - name: Install SDL2 + SDL2_ttf (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libsdl2-dev \
            libsdl2-ttf-dev \
            pkg-config

      - name: Make build.sh executable
        if: runner.os != 'Windows'
        run: chmod +x desktop_emulator/build.sh

      - name: Setup MSVC developer command prompt (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install pkg-config (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install -y pkgconfiglite

      - name: Install SDL2 + SDL2_ttf (Windows via vcpkg)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          cd C:\vcpkg
          .\vcpkg.exe install sdl2 sdl2-ttf --triplet x64-windows

      - name: Cache build tree
        uses: actions/cache@v4
        with:
          path: ${{ steps.strings.outputs.build-output-dir }}
          key: ${{ runner.os }}-cmake-${{ matrix.c_compiler }}-${{ matrix.build_type }}-${{ hashFiles('desktop_emulator/**/CMakeLists.txt', 'desktop_emulator/**/*.cmake', 'desktop_emulator/build.sh', 'desktop_emulator/build.bat') }}
          restore-keys: |
            ${{ runner.os }}-cmake-${{ matrix.c_compiler }}-${{ matrix.build_type }}-
            ${{ runner.os }}-cmake-${{ matrix.c_compiler }}-

      # --- Build via scripts --------------------------------------------

      - name: Build on POSIX via desktop_emulator/build.sh
        if: runner.os != 'Windows'
        working-directory: desktop_emulator
        env:
          BUILD_DIR: ${{ steps.strings.outputs.build-output-dir }}
          CMAKE_BUILD_TYPE: ${{ matrix.build_type }}
          CC: ${{ matrix.c_compiler }}
          CXX: ${{ matrix.cpp_compiler }}
        run: |
          set -euxo pipefail
          mkdir -p "$BUILD_DIR"
          ./build.sh

      - name: Build on Windows via desktop_emulator/build.bat
        if: runner.os == 'Windows'
        working-directory: desktop_emulator
        shell: cmd
        env:
          BUILD_DIR: ${{ steps.strings.outputs.build-output-dir }}
          CMAKE_BUILD_TYPE: ${{ matrix.build_type }}
          CC: ${{ matrix.c_compiler }}
          CXX: ${{ matrix.cpp_compiler }}
        run: |
          if not exist "%BUILD_DIR%" mkdir "%BUILD_DIR%"
          call build.bat

      # --- Tests (ctest if present in desktop_emulator/build/) ----------------

      - name: Test (ctest) on POSIX
        if: runner.os != 'Windows'
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          set -euxo pipefail
          if [ -f "CTestTestfile.cmake" ] || [ -d "Testing" ]; then
            ctest --output-on-failure -C ${{ matrix.build_type }}
          else
            echo "No CTest files found in ${PWD}; skipping tests."
          fi

      - name: Test (ctest) on Windows
        if: runner.os == 'Windows'
        shell: cmd
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          if exist CTestTestfile.cmake (
            ctest --output-on-failure --build-config ${{ matrix.build_type }}
          ) else (
            echo No CTest files found; skipping tests.
          )

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}
          if-no-files-found: ignore
          path: |
            desktop_emulator/build/**/*.log
            desktop_emulator/build/**/LastTest.log
            desktop_emulator/**/CMakeFiles/CMakeOutput.log
            desktop_emulator/**/CMakeFiles/CMakeError.log


