#pragma once
#include <stdint.h>

// ----- Enums (stable across the app) -----
enum class ElemCategory : uint8_t {
  AlkaliMetal, AlkalineEarth, Transition, PostTransition, Metalloid,
  ReactiveNonmetal, NobleGas, Lanthanoid, Actinoid, Unknown
};

enum class ElemBlock : uint8_t { s, p, d, f, Unknown };
enum class ElemPhase : uint8_t { Solid, Liquid, Gas, Unknown };

// Bit flags (pack booleans here)
static constexpr uint8_t F_RADIOACTIVE = 1u << 0;
static constexpr uint8_t F_TOXIC       = 1u << 1;
static constexpr uint8_t F_BIO_ROLE    = 1u << 2; // if you later curate this
static constexpr uint8_t F_SYNTHETIC   = 1u << 3;

// Main packed record (32 bytes, cache-friendly)
struct PackedElement {
  // ---- 16B hot numeric data (scaled ints, fast to compare/sort) ----
  uint16_t z;                // atomic number 1..118
  uint16_t mass_milli;       // atomic mass * 1000 (1.008 → 1008), 0 = unknown
  int16_t  mp_kx100;         // melting point K * 100 (13.99K → 1399), -1 = unknown
  int16_t  bp_kx100;         // boiling point K * 100, -1 = unknown
  uint16_t density_x1000;    // g/cm^3 (or g/L for gases) * 1000, 0 = unknown
  uint16_t ion_eVx1000;      // first ionization eV * 1000 (1312 meV → 1312000), 0 = unknown
  uint16_t en_paulingx100;   // Pauling EN * 100 (2.20 → 220), 0 = unknown
  uint16_t electron_aff_x100;// electron affinity kJ/mol or eV? (normalized to eV) *100; 0=unknown

  // ---- 8B structure/classification ----
  uint8_t  group;            // 1..18, 0 for La/Ac positions if not in table grid
  uint8_t  period;           // 1..7
  uint8_t  valence_e;        // 0..15 (best-effort; else 0)
  int8_t   oxid_min_biased;  // oxidation min + 64  (real = v-64), 0x7F if unknown
  int8_t   oxid_max_biased;  // oxidation max + 64  (real = v-64), 0x7F if unknown
  uint8_t  flags;            // F_*
  ElemCategory category;     // compact enum
  ElemBlock    block;        // s/p/d/f

  // ---- 8B indices / meta ----
  uint16_t sym_off;          // offset into PT_SYM_BYTES
  uint16_t name_off;         // offset into PT_NAME_BYTES
  uint16_t discoverer_off;   // offset into PT_DISC_BYTES (0 means empty)
  int16_t  discovery_year;   // signed (negative=BCE, 0=unknown)
};

// Blobs + table (generated by the packer)
extern const uint8_t  PT_SYM_BYTES[];
extern const uint32_t PT_SYM_SIZE;

extern const uint8_t  PT_NAME_BYTES[];
extern const uint32_t PT_NAME_SIZE;

extern const uint8_t  PT_DISC_BYTES[];
extern const uint32_t PT_DISC_SIZE;

extern const PackedElement PT_ELEMENTS[119]; // index by Z (0 unused)

// Small helpers
inline int8_t unbias_oxid(int8_t b) { return (b == INT8_MAX) ? 0 : (int8_t)(b - 64); }

// Grid layout for periodic table (18 columns, 9 rows)
struct GridCell {
  uint8_t z;                    // Atomic number (0 = empty cell)
  uint8_t flags;                // Display flags
};

// View modes for the periodic table
enum ViewMode : uint8_t {
  GRID_VIEW = 0,
  LIST_VIEW = 1,
  TRENDS_VIEW = 2
};

// Search/filter criteria
enum FilterType : uint8_t {
  FILTER_NONE = 0,
  FILTER_CATEGORY = 1,
  FILTER_BLOCK = 2,
  FILTER_PHASE = 3,
  FILTER_GROUP = 4,
  FILTER_PERIOD = 5
};

// Constants
static constexpr int PT_COLS = 18;
static constexpr int PT_ROWS = 9;
static constexpr int MAX_ELEMENTS = 118;

// Oxidation state helpers
inline int8_t unbias_oxidation(uint8_t biased) { 
  return int8_t(biased) - 64; 
}
inline uint8_t bias_oxidation(int8_t real) { 
  return uint8_t(real + 64); 
}

// Grid layout cell
struct Cell {
  uint8_t col;  // 0..17
  uint8_t row;  // 0..8 (7=La row, 8=Ac row)
  uint8_t z;    // atomic number or 0 for "blank"
};

// Search/filter system
enum class Prop : uint8_t { 
  Z, Mass, Density, EN, IE, Group, Period, Block, Category, Phase, 
  Radioactive, Toxic, Name, Symbol 
};

enum class Cmp : uint8_t { 
  EQ, NE, LT, LE, GT, GE, CONTAINS, IN, BETWEEN 
};

struct Filter {
  Prop p; 
  Cmp cmp;
  int32_t v1; 
  int32_t v2;  // for BETWEEN operations
  uint32_t str_off;  // for string contains (name/symbol)
};

// Helper functions
const char* category_name(ElemCategory cat);
const char* block_name(ElemBlock block);
const char* phase_name(ElemPhase phase);
